From 4c2dabab844a3bb5b278dc53e536ae176f31c68e Mon Sep 17 00:00:00 2001
From: "Jan M. Binder" <jan-git@nlogn.org>
Date: Sat, 11 Nov 2017 12:03:14 +0100
Subject: [PATCH 04/14] novena: GPU and display setup hacks

---
 drivers/gpu/drm/imx/dw_hdmi-imx.c  |  4 ++++
 drivers/gpu/drm/imx/imx-drm-core.c |  3 +++
 drivers/gpu/drm/imx/imx-ldb.c      | 18 ++++++++++++++----
 drivers/gpu/ipu-v3/ipu-di.c        | 29 +++++++++++++++++++++++++++++
 4 files changed, 50 insertions(+), 4 deletions(-)

diff --git a/drivers/gpu/drm/imx/dw_hdmi-imx.c b/drivers/gpu/drm/imx/dw_hdmi-imx.c
index b62763aa8706..b35f1baee289 100644
--- a/drivers/gpu/drm/imx/dw_hdmi-imx.c
+++ b/drivers/gpu/drm/imx/dw_hdmi-imx.c
@@ -222,6 +222,10 @@ static int dw_hdmi_imx_bind(struct device *dev, struct device *master,
 	encoder = &hdmi->encoder;
 
 	encoder->possible_crtcs = drm_of_find_possible_crtcs(drm, dev->of_node);
+
+	/* Hack: Only use IPU2 */
+	encoder->possible_crtcs &= 0x0c;
+
 	/*
 	 * If we failed to find the CRTC(s) which this encoder is
 	 * supposed to be connected to, it's because the CRTC has
diff --git a/drivers/gpu/drm/imx/imx-drm-core.c b/drivers/gpu/drm/imx/imx-drm-core.c
index f91cb72d0830..914ee9851f44 100644
--- a/drivers/gpu/drm/imx/imx-drm-core.c
+++ b/drivers/gpu/drm/imx/imx-drm-core.c
@@ -164,6 +164,9 @@ int imx_drm_encoder_parse_of(struct drm_device *drm,
 
 	encoder->possible_crtcs = crtc_mask;
 
+	/* Hack: Only allow these devices to use IPU1 */
+	encoder->possible_crtcs &= 0x03;
+
 	/* FIXME: this is the mask of outputs which can clone this output. */
 	encoder->possible_clones = ~0;
 
diff --git a/drivers/gpu/drm/imx/imx-ldb.c b/drivers/gpu/drm/imx/imx-ldb.c
index 56dd7a9a8e25..7cf13e198b7c 100644
--- a/drivers/gpu/drm/imx/imx-ldb.c
+++ b/drivers/gpu/drm/imx/imx-ldb.c
@@ -1,3 +1,4 @@
+#define DEBUG
 /*
  * i.MX drm driver - LVDS display bridge
  *
@@ -175,20 +176,24 @@ static void imx_ldb_set_clock(struct imx_ldb *ldb, int mux, int chno,
 		unsigned long serial_clk, unsigned long di_clk)
 {
 	int ret;
+	int ctrl;
 
-	dev_dbg(ldb->dev, "%s: now: %ld want: %ld\n", __func__,
+	regmap_read(ldb->regmap, IOMUXC_GPR2, &ctrl);
+	dev_dbg(ldb->dev, "%d:%s: LDB_CTRL: 0x%08x\n", chno, __func__, ctrl);
+
+	dev_dbg(ldb->dev, "%d:%s: now: %ld want: %ld\n", chno, __func__,
 			clk_get_rate(ldb->clk_pll[chno]), serial_clk);
 	clk_set_rate(ldb->clk_pll[chno], serial_clk);
 
-	dev_dbg(ldb->dev, "%s after: %ld\n", __func__,
+	dev_dbg(ldb->dev, "%d:%s after: %ld\n", chno, __func__,
 			clk_get_rate(ldb->clk_pll[chno]));
 
-	dev_dbg(ldb->dev, "%s: now: %ld want: %ld\n", __func__,
+	dev_dbg(ldb->dev, "%d:%s: now: %ld want: %ld\n", chno, __func__,
 			clk_get_rate(ldb->clk[chno]),
 			(long int)di_clk);
 	clk_set_rate(ldb->clk[chno], di_clk);
 
-	dev_dbg(ldb->dev, "%s after: %ld\n", __func__,
+	dev_dbg(ldb->dev, "%d:%s after: %ld\n", chno, __func__,
 			clk_get_rate(ldb->clk[chno]));
 
 	/* set display clock mux to LDB input clock */
@@ -205,6 +210,7 @@ static void imx_ldb_encoder_enable(struct drm_encoder *encoder)
 	struct imx_ldb *ldb = imx_ldb_ch->ldb;
 	int dual = ldb->ldb_ctrl & LDB_SPLIT_MODE_EN;
 	int mux = drm_of_encoder_active_port_id(imx_ldb_ch->child, encoder);
+	int reg;
 
 	drm_panel_prepare(imx_ldb_ch->panel);
 
@@ -245,6 +251,10 @@ static void imx_ldb_encoder_enable(struct drm_encoder *encoder)
 				   mux << lvds_mux->shift);
 	}
 
+	regmap_read(ldb->regmap, IOMUXC_GPR2, &reg);
+	dev_dbg(ldb->dev, "%s: LDB_CTRL: 0x%08x\n", __func__, reg);
+	regmap_write(ldb->regmap, IOMUXC_GPR2, 0);
+	udelay(100);
 	regmap_write(ldb->regmap, IOMUXC_GPR2, ldb->ldb_ctrl);
 
 	drm_panel_enable(imx_ldb_ch->panel);
diff --git a/drivers/gpu/ipu-v3/ipu-di.c b/drivers/gpu/ipu-v3/ipu-di.c
index d2f1bd9d3deb..b38aa3243860 100644
--- a/drivers/gpu/ipu-v3/ipu-di.c
+++ b/drivers/gpu/ipu-v3/ipu-di.c
@@ -12,6 +12,7 @@
  * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  * for more details.
  */
+#include <linux/delay.h>
 #include <linux/export.h>
 #include <linux/module.h>
 #include <linux/types.h>
@@ -436,6 +437,20 @@ static void ipu_di_config_clock(struct ipu_di *di,
 
 			clk_set_rate(clk, sig->mode.pixelclock);
 
+			/*
+			 * The clocks need time to stabilize before the clkgen
+			 * is enabled.  Without this, the clocks may not be
+			 * properly synchronized, and HSYNC and VSYNC may come
+			 * at unusual intervals.  This will manifest itself in
+			 * an unstable display, where the only solution is to
+			 * re-initialize the whole panel, e.g. by running:
+			 *    xrandr --output LVDS1 --off
+			 *    xrandr --output LVDS1 --auto
+			 * The Freescale drivers include this delay, which
+			 * solves the problem.
+			 */
+			msleep(15);
+
 			in_rate = clk_get_rate(clk);
 			div = DIV_ROUND_CLOSEST(in_rate, sig->mode.pixelclock);
 			div = clamp(div, 1U, 255U);
@@ -476,6 +491,20 @@ static void ipu_di_config_clock(struct ipu_di *di,
 
 			clk_set_rate(clk, sig->mode.pixelclock);
 
+			/*
+			 * The clocks need time to stabilize before the clkgen
+			 * is enabled.  Without this, the clocks may not be
+			 * properly synchronized, and HSYNC and VSYNC may come
+			 * at unusual intervals.  This will manifest itself in
+			 * an unstable display, where the only solution is to
+			 * re-initialize the whole panel, e.g. by running:
+			 *    xrandr --output LVDS1 --off
+			 *    xrandr --output LVDS1 --auto
+			 * The Freescale drivers include this delay, which
+			 * solves the problem.
+			 */
+			msleep(15);
+
 			in_rate = clk_get_rate(clk);
 			div = DIV_ROUND_CLOSEST(in_rate, sig->mode.pixelclock);
 			div = clamp(div, 1U, 255U);
-- 
2.15.1.424.g9478a66081

